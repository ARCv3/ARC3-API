# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: arc-api-cluster                # set this to your Amazon ECS cluster name
  CONTAINER_NAME: arc-api
  ECS_SERVICE: arc-api-service
  ECS_TD: .github/workflows/td.json

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: STG

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Inject environment
        env:
          PORT: ${{ secrets.PORT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          FULLCHAIN: ${{ secrets.FULLCHAIN }}
          PRIVKEY: ${{ secrets.PRIVKEY }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
          DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLIENT_REDIRECT_URI: ${{ secrets.CLIENT_REDIRECT_URI }}
          TOKEN: ${{ secrets.TOKEN }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          HOSTED_URL: ${{ secrets.HOSTED_URL }}

        run: |
          sed -i "s/\<MONGODB\_URI\>/$MONGODB_URI/g" .github/workflows/td.json
          sed -i "s/\<PORT\>/$PORT/g" .github/workflows/td.json
          sed -i "s/\<FULLCHAIN\>/$FULLCHAIN/g" .github/workflows/td.json
          sed -i "s/\<PRIVKEY\>/$PRIVKEY/g" .github/workflows/td.json
          sed -i "s/\<DISCORD\_CLIENT\_ID\>/$DISCORD_CLIENT_ID/g" .github/workflows/td.json
          sed -i "s/\<DISCORD\_CLIENT\_SECRET\>/$DISCORD_CLIENT_SECRET/g" .github/workflows/td.json
          sed -i "s/\<JWT\_SECRET\>/$JWT_SECRET/g" .github/workflows/td.json
          sed -i "s/\<CLIENT\_REDIRECT\_URI\>/$CLIENT_REDIRECT_URI/g" .github/workflows/td.json
          sed -i "s/<TOKEN\>/$TOKEN/g" .github/workflows/td.json
          sed -i "s/\<DIRECT\_URL\>/$DIRECT_URL/g" .github/workflows/td.json
          sed -i "s/\<HOSTED\_URL\>/$HOSTED_UR/g".github/workflows/td.json
          sed -i "s/\<DISCORD\_REDIRECT\_URI\>/$DISCORD_REDIRECT_URI/g" .github/workflows/td.json

      - name: Inject environment
        env:
          PORT: ${{ secrets.PORT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          FULLCHAIN: ${{ secrets.FULLCHAIN }}
          PRIVKEY: ${{ secrets.PRIVKEY }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
          DISCORD_REDIRECT_URI: ${{ secrets.DISCORD_REDIRECT_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLIENT_REDIRECT_URI: ${{ secrets.CLIENT_REDIRECT_URI }}
          TOKEN: ${{ secrets.TOKEN }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          HOSTED_URL: ${{ secrets.HOSTED_URL }}

        run: |
          sed -i -e "s/<MONGODB_URI>/$MONGODB_URI/g" .github/workflows/td.json
          sed -i -e "s/<PORT>/$PORT/g" .github/workflows/td.json
          sed -i -e "s/<FULLCHAIN>/$FULLCHAIN/g" .github/workflows/td.json
          sed -i "s/<DISCORD_CLIENT_ID>/$DISCORD_CLIENT_ID/g" .github/workflows/td.json
          sed -i "s/<DISCORD_CLIENT_SECRET>/$DISCORD_CLIENT_SECRET/g" .github/workflows/td.json
          sed -i "s/<JWT_SECRET>/$JWT_SECRET/g" .github/workflows/td.json
          sed -i "s/<CLIENT_REDIRECT_URI>/$CLIENT_REDIRECT_URI/g" .github/workflows/td.json
          sed -i "s/TOKEN>/$TOKENI/g" .github/workflows/td.json
          sed -i "s/<DIRECT_URL>/$DIRECT_URL/g" .github/workflows/td.json
          sed -i "s/<HOSTED_URL>/$HOSTED_UR/g".github/workflows/td.json
          sed -i "s/<DISCORD_REDIRECT_URI>/$DISCORD_REDIRECT_URI/g" .github/workflows/td.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: "140023379914.dkr.ecr.us-east-2.amazonaws.com"
          ECR_REPOSITORY: "arc-api-repo"
          IMAGE_TAG: ${{ github.sha }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          # Generate the Environment file
          touch .env

          echo PORT=${{ secrets.PORT }} \>\> .env
          echo MONGODB_URI=${{ secrets.MONGODB_URI }} \>\> .env
          echo FULLCHAIN=${{ secrets.FULLCHAIN }} \>\> .env
          echo PRIVKEY=${{ secrets.PRIVKEY }} \>\> .env
          echo DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }} \>\> .env
          echo DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }} \>\> .env
          echo DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }} \>\> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} \>\> .env
          echo CLIENT_REDIRECT_URI=${{ secrets.CLIENT_REDIRECT_URI }} \>\> .env
          echo TOKEN=${{ secrets.TOKEN }} \>\> .env
          echo DIRECT_URL=${{ secrets.DIRECT_URL }} \>\> .env
          echo HOSTED_URL=${{ secrets.HOSTED_URL }} \>\> .env

          cat .env


          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \>\> $GITHUB_OUTPUT


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
